#pragma once
typedef unsigned long long uint64;
typedef unsigned int uint;
typedef unsigned char uchar;

enum { BISHOP, ROOK };

constexpr int MaxRookSq = 4096;
constexpr int MaxBishopSq = 512;

constexpr uint64 _r_mask(int square) {
    int rank = square / 8;
    int file = square % 8;
    uint64 attack{0ULL};
    for (int r = rank + 1; r <= 6; r++) {
        attack |= 1ULL << (file + r * 8);
    }
    for (int r = rank - 1; r >= 1; r--) {
        attack |= 1ULL << (file + r * 8);
    }
    for (int f = file + 1; f <= 6; f++) {
        attack |= 1ULL << (f + rank * 8);
    }
    for (int f = file - 1; f >= 1; f--) {
        attack |= 1ULL << (f + rank * 8);
    }
    return attack;
}

constexpr uint64 _b_mask(int square) {
    int rank = square / 8;
    int file = square % 8;
    uint64 attack{0ULL};
    for (int r = rank + 1, f = file + 1; r <= 6 && f <= 6; r++, f++) {
        attack |= 1ULL << (f + r * 8);
    }
    for (int r = rank - 1, f = file + 1; r >= 1 && f <= 6; r--, f++) {
        attack |= 1ULL << (f + r * 8);
    }
    for (int r = rank + 1, f = file - 1; r <= 6 && f >= 1; r++, f--) {
        attack |= 1ULL << (f + r * 8);
    }
    for (int r = rank - 1, f = file - 1; r >= 1 && f >= 1; r--, f--) {
        attack |= 1ULL << (f + r * 8);
    }
    return attack;
}

constexpr int RookAmount[]
{
4096,
2048,
2048,
2048,
2048,
2048,
2048,
4096,
2048,
1024,
1024,
1024,
1024,
1024,
1024,
2048,
2048,
1024,
1024,
1024,
1024,
1024,
1024,
2048,
2048,
1024,
1024,
1024,
1024,
1024,
1024,
2048,
2048,
1024,
1024,
1024,
1024,
1024,
1024,
2048,
2048,
1024,
1024,
1024,
1024,
1024,
1024,
2048,
2048,
1024,
1024,
1024,
1024,
1024,
1024,
2048,
4096,
2048,
2048,
2048,
2048,
2048,
2048,
4096
};

constexpr int BishopAmount[]
{
64,
32,
32,
32,
32,
32,
32,
64,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
128,
128,
128,
128,
32,
32,
32,
32,
128,
512,
512,
128,
32,
32,
32,
32,
128,
512,
512,
128,
32,
32,
32,
32,
128,
128,
128,
128,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
64,
32,
32,
32,
32,
32,
32,
64
};

constexpr uint64 _rook_mask[]
{
_r_mask(0),
_r_mask(1),
_r_mask(2),
_r_mask(3),
_r_mask(4),
_r_mask(5),
_r_mask(6),
_r_mask(7),
_r_mask(8),
_r_mask(9),
_r_mask(10),
_r_mask(11),
_r_mask(12),
_r_mask(13),
_r_mask(14),
_r_mask(15),
_r_mask(16),
_r_mask(17),
_r_mask(18),
_r_mask(19),
_r_mask(20),
_r_mask(21),
_r_mask(22),
_r_mask(23),
_r_mask(24),
_r_mask(25),
_r_mask(26),
_r_mask(27),
_r_mask(28),
_r_mask(29),
_r_mask(30),
_r_mask(31),
_r_mask(32),
_r_mask(33),
_r_mask(34),
_r_mask(35),
_r_mask(36),
_r_mask(37),
_r_mask(38),
_r_mask(39),
_r_mask(40),
_r_mask(41),
_r_mask(42),
_r_mask(43),
_r_mask(44),
_r_mask(45),
_r_mask(46),
_r_mask(47),
_r_mask(48),
_r_mask(49),
_r_mask(50),
_r_mask(51),
_r_mask(52),
_r_mask(53),
_r_mask(54),
_r_mask(55),
_r_mask(56),
_r_mask(57),
_r_mask(58),
_r_mask(59),
_r_mask(60),
_r_mask(61),
_r_mask(62),
_r_mask(63)
};

constexpr uint64 _bishop_mask[]
{
_b_mask(0),
_b_mask(1),
_b_mask(2),
_b_mask(3),
_b_mask(4),
_b_mask(5),
_b_mask(6),
_b_mask(7),
_b_mask(8),
_b_mask(9),
_b_mask(10),
_b_mask(11),
_b_mask(12),
_b_mask(13),
_b_mask(14),
_b_mask(15),
_b_mask(16),
_b_mask(17),
_b_mask(18),
_b_mask(19),
_b_mask(20),
_b_mask(21),
_b_mask(22),
_b_mask(23),
_b_mask(24),
_b_mask(25),
_b_mask(26),
_b_mask(27),
_b_mask(28),
_b_mask(29),
_b_mask(30),
_b_mask(31),
_b_mask(32),
_b_mask(33),
_b_mask(34),
_b_mask(35),
_b_mask(36),
_b_mask(37),
_b_mask(38),
_b_mask(39),
_b_mask(40),
_b_mask(41),
_b_mask(42),
_b_mask(43),
_b_mask(44),
_b_mask(45),
_b_mask(46),
_b_mask(47),
_b_mask(48),
_b_mask(49),
_b_mask(50),
_b_mask(51),
_b_mask(52),
_b_mask(53),
_b_mask(54),
_b_mask(55),
_b_mask(56),
_b_mask(57),
_b_mask(58),
_b_mask(59),
_b_mask(60),
_b_mask(61),
_b_mask(62),
_b_mask(63)
};

constexpr uint64 r_bits[]
{
__builtin_popcountll(_r_mask(0)),
__builtin_popcountll(_r_mask(1)),
__builtin_popcountll(_r_mask(2)),
__builtin_popcountll(_r_mask(3)),
__builtin_popcountll(_r_mask(4)),
__builtin_popcountll(_r_mask(5)),
__builtin_popcountll(_r_mask(6)),
__builtin_popcountll(_r_mask(7)),
__builtin_popcountll(_r_mask(8)),
__builtin_popcountll(_r_mask(9)),
__builtin_popcountll(_r_mask(10)),
__builtin_popcountll(_r_mask(11)),
__builtin_popcountll(_r_mask(12)),
__builtin_popcountll(_r_mask(13)),
__builtin_popcountll(_r_mask(14)),
__builtin_popcountll(_r_mask(15)),
__builtin_popcountll(_r_mask(16)),
__builtin_popcountll(_r_mask(17)),
__builtin_popcountll(_r_mask(18)),
__builtin_popcountll(_r_mask(19)),
__builtin_popcountll(_r_mask(20)),
__builtin_popcountll(_r_mask(21)),
__builtin_popcountll(_r_mask(22)),
__builtin_popcountll(_r_mask(23)),
__builtin_popcountll(_r_mask(24)),
__builtin_popcountll(_r_mask(25)),
__builtin_popcountll(_r_mask(26)),
__builtin_popcountll(_r_mask(27)),
__builtin_popcountll(_r_mask(28)),
__builtin_popcountll(_r_mask(29)),
__builtin_popcountll(_r_mask(30)),
__builtin_popcountll(_r_mask(31)),
__builtin_popcountll(_r_mask(32)),
__builtin_popcountll(_r_mask(33)),
__builtin_popcountll(_r_mask(34)),
__builtin_popcountll(_r_mask(35)),
__builtin_popcountll(_r_mask(36)),
__builtin_popcountll(_r_mask(37)),
__builtin_popcountll(_r_mask(38)),
__builtin_popcountll(_r_mask(39)),
__builtin_popcountll(_r_mask(40)),
__builtin_popcountll(_r_mask(41)),
__builtin_popcountll(_r_mask(42)),
__builtin_popcountll(_r_mask(43)),
__builtin_popcountll(_r_mask(44)),
__builtin_popcountll(_r_mask(45)),
__builtin_popcountll(_r_mask(46)),
__builtin_popcountll(_r_mask(47)),
__builtin_popcountll(_r_mask(48)),
__builtin_popcountll(_r_mask(49)),
__builtin_popcountll(_r_mask(50)),
__builtin_popcountll(_r_mask(51)),
__builtin_popcountll(_r_mask(52)),
__builtin_popcountll(_r_mask(53)),
__builtin_popcountll(_r_mask(54)),
__builtin_popcountll(_r_mask(55)),
__builtin_popcountll(_r_mask(56)),
__builtin_popcountll(_r_mask(57)),
__builtin_popcountll(_r_mask(58)),
__builtin_popcountll(_r_mask(59)),
__builtin_popcountll(_r_mask(60)),
__builtin_popcountll(_r_mask(61)),
__builtin_popcountll(_r_mask(62)),
__builtin_popcountll(_r_mask(63))
};

constexpr uint64 b_bits[]
{
__builtin_popcountll(_b_mask(0)),
__builtin_popcountll(_b_mask(1)),
__builtin_popcountll(_b_mask(2)),
__builtin_popcountll(_b_mask(3)),
__builtin_popcountll(_b_mask(4)),
__builtin_popcountll(_b_mask(5)),
__builtin_popcountll(_b_mask(6)),
__builtin_popcountll(_b_mask(7)),
__builtin_popcountll(_b_mask(8)),
__builtin_popcountll(_b_mask(9)),
__builtin_popcountll(_b_mask(10)),
__builtin_popcountll(_b_mask(11)),
__builtin_popcountll(_b_mask(12)),
__builtin_popcountll(_b_mask(13)),
__builtin_popcountll(_b_mask(14)),
__builtin_popcountll(_b_mask(15)),
__builtin_popcountll(_b_mask(16)),
__builtin_popcountll(_b_mask(17)),
__builtin_popcountll(_b_mask(18)),
__builtin_popcountll(_b_mask(19)),
__builtin_popcountll(_b_mask(20)),
__builtin_popcountll(_b_mask(21)),
__builtin_popcountll(_b_mask(22)),
__builtin_popcountll(_b_mask(23)),
__builtin_popcountll(_b_mask(24)),
__builtin_popcountll(_b_mask(25)),
__builtin_popcountll(_b_mask(26)),
__builtin_popcountll(_b_mask(27)),
__builtin_popcountll(_b_mask(28)),
__builtin_popcountll(_b_mask(29)),
__builtin_popcountll(_b_mask(30)),
__builtin_popcountll(_b_mask(31)),
__builtin_popcountll(_b_mask(32)),
__builtin_popcountll(_b_mask(33)),
__builtin_popcountll(_b_mask(34)),
__builtin_popcountll(_b_mask(35)),
__builtin_popcountll(_b_mask(36)),
__builtin_popcountll(_b_mask(37)),
__builtin_popcountll(_b_mask(38)),
__builtin_popcountll(_b_mask(39)),
__builtin_popcountll(_b_mask(40)),
__builtin_popcountll(_b_mask(41)),
__builtin_popcountll(_b_mask(42)),
__builtin_popcountll(_b_mask(43)),
__builtin_popcountll(_b_mask(44)),
__builtin_popcountll(_b_mask(45)),
__builtin_popcountll(_b_mask(46)),
__builtin_popcountll(_b_mask(47)),
__builtin_popcountll(_b_mask(48)),
__builtin_popcountll(_b_mask(49)),
__builtin_popcountll(_b_mask(50)),
__builtin_popcountll(_b_mask(51)),
__builtin_popcountll(_b_mask(52)),
__builtin_popcountll(_b_mask(53)),
__builtin_popcountll(_b_mask(54)),
__builtin_popcountll(_b_mask(55)),
__builtin_popcountll(_b_mask(56)),
__builtin_popcountll(_b_mask(57)),
__builtin_popcountll(_b_mask(58)),
__builtin_popcountll(_b_mask(59)),
__builtin_popcountll(_b_mask(60)),
__builtin_popcountll(_b_mask(61)),
__builtin_popcountll(_b_mask(62)),
__builtin_popcountll(_b_mask(63))
};

